(def create-sio-class (partial create-sio-class0 quality))
(create-sio-class "assertional qualifier" "an assertional qualifier is the quality of affirmation, either being positive or negative.")
(add-equivalent assertional_qualifier (owlor negative positive))
(create-sio-class "existence quality" "existence quality is the quality of an entity that describe in what environment it is known to exist.")
(create-sio-class "informational quality" "an informational quality is a quality that pertains to information.")
(add-subclass informational_quality (owlsome is_quality_of information_content_entity))
(create-sio-class "intensity" "intensity is a quality that represents the strength or degree of something.")
(create-sio-class "normality" "normality is the quality in which the value may differ from normal or average")
(add-equivalent normality (owlor abnormal normal))
(create-sio-class "object quality" "An object quality is quality of an object.")
(add-subclass object_quality (owlsome is_quality_of object))
(create-sio-class "process quality" "A process quality is quality that is associated with a process.")
(add-subclass process_quality (owlsome is_quality_of process))
(def create-sio-class (partial create-sio-class0 assertional_qualifier))
(create-sio-class "negative" "negative is an assertional qualifier that expresses the falsity or lack of truth of a basic assertion.")
(add-disjoint negative positive)
(create-sio-class "positive" "positive is an assertional qualifier that expresses the validity or truth of a basic assertion.")
(add-disjoint positive negative)
(def create-sio-class (partial create-sio-class0 existence_quality))
(create-sio-class "hypothetical" "hypothetical is the quality of an entity that is conjectured to exist.")
(create-sio-class "real" "real is the quality of an entity that exists in real space and time.")
(add-disjoint real fictional)
(add-disjoint real virtual)
(create-sio-class "unsupported" "unsupported is an existence quality in which there is no evidence to support the existence of the entity in any world (real or hypothetical)")
(create-sio-class "virtual" "virtual is the quality of an entity that exists only in a virtual setting such as a simulation or game environment.")
(add-disjoint virtual real)
(def create-sio-class (partial create-sio-class0 informational_quality))
(create-sio-class "agreement quality" "agreement quality is a quality that exhibits the degree of consensus for some set of assertions.")
(add-equivalent agreement_quality (owlor agreement disagreement))
(create-sio-class "truth value" "truth value is a quality of information that is claimed/verified to be true or false.")
(add-equivalent truth_value (owlor _false _true))
(def create-sio-class (partial create-sio-class0 intensity))
(create-sio-class "fatal" "fatal is a qualitative intensity value that is more intense than severe, leading to the death/non-functioning of a system.")
(add-disjoint fatal mild)
(add-disjoint fatal moderate)
(add-disjoint fatal severe)
(add-disjoint fatal strong)
(add-disjoint fatal weak)
(create-sio-class "mild" "mild is a qualitative intensity value that is more intense than weak, but less intense than moderate.")
(add-disjoint mild fatal)
(add-disjoint mild moderate)
(add-disjoint mild severe)
(add-disjoint mild strong)
(add-disjoint mild weak)
(create-sio-class "moderate" "moderate is a qualitative intensity value that is more intense than mild, but less intense than strong.")
(add-disjoint moderate fatal)
(add-disjoint moderate mild)
(add-disjoint moderate severe)
(add-disjoint moderate strong)
(add-disjoint moderate weak)
(create-sio-class "severe" "severe is a qualitative intensity value that is more intense than strong, but less intense than fatal.")
(add-disjoint severe fatal)
(add-disjoint severe mild)
(add-disjoint severe moderate)
(add-disjoint severe strong)
(add-disjoint severe weak)
(create-sio-class "strong" "strong is a qualitative intensity value that is more intense than moderate, but less intense than severe.")
(add-disjoint strong fatal)
(add-disjoint strong mild)
(add-disjoint strong moderate)
(add-disjoint strong severe)
(add-disjoint strong weak)
(create-sio-class "weak" "weak is a qualitative intensity value that is more intense than none, but less intense than mild.")
(add-disjoint weak fatal)
(add-disjoint weak mild)
(add-disjoint weak moderate)
(add-disjoint weak severe)
(add-disjoint weak strong)
(def create-sio-class (partial create-sio-class0 normality))
(create-sio-class "abnormal" "A quality that has a value that is outside normal or average.")
(add-disjoint abnormal normal)
(create-sio-class "normal" "A quality that has a value that is normal or average.")
(add-annotation normal [(annotation equivalentTo (literal "PATO:0000461" :type :RDF_PLAIN_LITERAL))])
(add-disjoint normal abnormal)
(def create-sio-class (partial create-sio-class0 object_quality))
(create-sio-class "biological quality" "a biological quality is a quality held by a biological entity.")
(create-sio-class "chemical quality" "chemical quality is the quality of a chemical entity.")
(create-sio-class "compositional quality" "composition quality is a quality that describes its composition or anatomy.")
(create-sio-class "fitness" "fitness is the quality of an object with respect to some stated functions or evolutionary adaptation.")
(create-sio-class "shape" "shape is the quality of a bearer that relates to its spatial extent.")
(create-sio-class "structural quality" "a structural quality is a quality of an object that describes its structure.")
(create-sio-class "text quality" "text quality is the quality of a textual entity.")
(add-subclass text_quality (owlsome is_quality_of textual_entity))
(create-sio-class0 process_status "process quality" "A process quality is quality that is associated with a process.")
(add-subclass process_status (owlsome is_attribute_of process))
(def create-sio-class (partial create-sio-class0 process_status))
(create-sio-class "aborted" "aborted is a process status in which a started process will not complete as intended.")
(add-disjoint aborted completed)
(add-disjoint aborted not_started)
(add-disjoint aborted ongoing)
(add-disjoint aborted suspended)
(create-sio-class "completed" "completed is that status of a process that successfully unfolds.")
(add-disjoint completed aborted)
(add-disjoint completed not_started)
(add-disjoint completed ongoing)
(add-disjoint completed suspended)
(create-sio-class "not started" "not started is the status of a process that is predicted to exist but has not yet begun.")
(add-disjoint not_started aborted)
(add-disjoint not_started completed)
(add-disjoint not_started ongoing)
(add-disjoint not_started suspended)
(create-sio-class "ongoing" "ongoing is the status of a process that is not yet complete.")
(add-disjoint ongoing aborted)
(add-disjoint ongoing completed)
(add-disjoint ongoing not_started)
(add-disjoint ongoing suspended)
(create-sio-class "suspended" "suspended is the status of a process that is no longer progressing towards completion.")
(add-disjoint suspended aborted)
(add-disjoint suspended completed)
(add-disjoint suspended not_started)
(add-disjoint suspended ongoing)
(def create-sio-class (partial create-sio-class0 not_started))
(create-sio-class "cancelled" "cancelled is a process status in which the process, while planned to occur, will not occur.")
(create-sio-class "planned" "planned is a process status for a process that has not yet started, but is referred to in a plan.")
(def create-sio-class (partial create-sio-class0 biological_quality))
(create-sio-class "biological sex" "biological sex is the quality of a biological organism based on reproductive function or organs.")
(add-disjoint biological_sex cellular_quality)
(add-disjoint biological_sex disease)
(add-disjoint biological_sex ethnicity)
(add-disjoint biological_sex life_status)
(add-disjoint biological_sex phenotype)
(add-disjoint biological_sex race)
(create-sio-class "cellular quality" "cellular quality is the quality of a cell")
(add-subclass cellular_quality (owlsome is_quality_of cell))
(add-disjoint cellular_quality biological_sex)
(add-disjoint cellular_quality disease)
(add-disjoint cellular_quality ethnicity)
(add-disjoint cellular_quality life_status)
(add-disjoint cellular_quality phenotype)
(add-disjoint cellular_quality race)
(create-sio-class "disease" "disease is the outward manifestation of one or more disorders.")
(add-subclass disease (owlsome is_quality_of (owland material_entity (owlsome has_quality abnormal))))
(add-disjoint disease biological_sex)
(add-disjoint disease cellular_quality)
(add-disjoint disease ethnicity)
(add-disjoint disease life_status)
(add-disjoint disease phenotype)
(add-disjoint disease race)
(create-sio-class "ethnicity" "ethnicity is the biological quality of membership in a social group based on a common heritage.")
(add-disjoint ethnicity biological_sex)
(add-disjoint ethnicity cellular_quality)
(add-disjoint ethnicity disease)
(add-disjoint ethnicity life_status)
(add-disjoint ethnicity phenotype)
(add-disjoint ethnicity race)
(create-sio-class "life status" "life status is the quality of whether something is alive or dead.")
(add-disjoint life_status biological_sex)
(add-disjoint life_status cellular_quality)
(add-disjoint life_status disease)
(add-disjoint life_status ethnicity)
(add-disjoint life_status phenotype)
(add-disjoint life_status race)
(add-equivalent life_status (owlor alive dead))
(create-sio-class "phenotype" "a phenotype is an observable characteristic of an individual.")
(add-disjoint phenotype biological_sex)
(add-disjoint phenotype cellular_quality)
(add-disjoint phenotype disease)
(add-disjoint phenotype ethnicity)
(add-disjoint phenotype life_status)
(add-disjoint phenotype race)
(create-sio-class "race" "race is a characteristic of an individual by heritable phenotypic characteristics, geographic ancestry, physical appearance, ethnicity, and social status.")
(add-disjoint race biological_sex)
(add-disjoint race cellular_quality)
(add-disjoint race disease)
(add-disjoint race ethnicity)
(add-disjoint race life_status)
(add-disjoint race phenotype)
(def create-sio-class (partial create-sio-class0 chemical_quality))
(create-sio-class "charge quality" "charge quality is the quality pertaining to electric charge.")
(add-equivalent charge_quality (owlor charged uncharged))
(create-sio-class "polar quality" "the quality of being polar or not polar.")
(add-equivalent polar_quality (owlor non-polar polar))
(create-sio-class "toxicity" "toxicity is the quality of a chemical substance to cause injury to an organism in a dose dependent manner.")
(add-equivalent toxicity (owlor non_toxic toxic))
(def create-sio-class (partial create-sio-class0 compositional_quality))
(create-sio-class "heterogeneous" "homogeneous is a quality that describes the varied composition of an object.")
(add-disjoint heterogeneous homogeneous)
(create-sio-class "homogeneous" "homogeneous is a quality that describes the uniform composition of an object.")
(add-disjoint homogeneous heterogeneous)
(create-sio-class0 curvature "shape" "shape is the quality of a bearer that relates to its spatial extent.")
(def create-sio-class (partial create-sio-class0 structural_quality))
(create-sio-class "disordered" "disordered is a structural quality in which the parts of an object are non-rigid.")
(add-subclass disordered (owlsome is_quality_of (owland entity (owlsome has_quality abnormal))))
(add-disjoint disordered rigid)
(create-sio-class "rigid" "rigid is the quality of maintaining structural integrity (and not bending) under pressure.")
(add-disjoint rigid disordered)
(create-sio-class0 written "text quality" "text quality is the quality of a textual entity.")
(def create-sio-class (partial create-sio-class0 written))
(create-sio-class "draft" "draft is the quality of text that has not yet complete.")
(add-annotation draft [(annotation hasSynonym (literal "drafted" :type :RDF_PLAIN_LITERAL))])
(create-sio-class "finalized" "finalized is the quality of a textual entity that is in its final form.")
(create-sio-class "reviewed" "reviewed is the quality of a textual entity that has been examined and commented on by another party.")
(def create-sio-class (partial create-sio-class0 reviewed))
(create-sio-class "editor reviewed" "reviewed is the quality of a textual entity that has been examined and commented on by an editor.")
(add-disjoint editor_reviewed peer-reviewed)
(create-sio-class "peer-reviewed" "reviewed is the quality of a textual entity that has been examined and commented by a peer expert reviewer.")
(add-disjoint peer-reviewed editor_reviewed)
(def create-sio-class (partial create-sio-class0 curvature))
(create-sio-class "bent" "bent is the quality of a line being sharply curved or having an angle.")
(add-disjoint bent curved)
(add-disjoint bent straight)
(create-sio-class "curved" "curved is the quality of a line that deviates from straightness in a smooth, continuous fashion.")
(add-disjoint curved bent)
(add-disjoint curved straight)
(create-sio-class "straight" "shape is a quality of a bearer that is free of curves, bends, or angles.")
(add-annotation straight [(annotation (iri "http://www.w3.org/2000/01/rdf-schema#seeAlso") (literal "PATO:0002180 [for material entities]" :type :RDF_PLAIN_LITERAL))])
(add-disjoint straight bent)
(add-disjoint straight curved)
(def create-sio-class (partial create-sio-class0 charge_quality))
(create-sio-class "charged" "The quality of having a charge")
(add-disjoint charged uncharged)
(create-sio-class "uncharged" "the quality of not having a charge")
(add-disjoint uncharged charged)
(def create-sio-class (partial create-sio-class0 polar_quality))
(create-sio-class "non-polar" "non-polar is the quality of not having a dipole.")
(add-disjoint non-polar polar)
(create-sio-class "polar" "polar is the quality of having a dipole.")
(add-disjoint polar non-polar)
(def create-sio-class (partial create-sio-class0 toxicity))
(create-sio-class "non toxic" "toxic is the quality of a substance having no damaging effect to a system.")
(add-disjoint non_toxic toxic)
(create-sio-class "toxic" "toxic is the quality of a substance imparing the normal functioning of a  system.")
(add-disjoint toxic non_toxic)
(def create-sio-class (partial create-sio-class0 charged))
(create-sio-class "complete charge" "a complete charge is a charge where the value of the charge is a multiple of 1.")
(add-equivalent complete_charge (owlor negative_charge positive_charge))
(create-sio-class "partial charge" "the quality of having a charge that is not a full multiple of 1 unit charge.")
(add-equivalent partial_charge (owlor partial_negative_charge partial_positive_charge))
(def create-sio-class (partial create-sio-class0 complete_charge))
(create-sio-class "negative charge" "a negative charge is a charge where the value is negative.")
(add-disjoint negative_charge positive_charge)
(create-sio-class "positive charge" "a positive charge is a charge where the value is positive.")
(add-disjoint positive_charge negative_charge)
(def create-sio-class (partial create-sio-class0 partial_charge))
(create-sio-class "partial negative charge" "a partial positive charge is a partial charge where the value of the charge is positive.")
(add-disjoint partial_negative_charge partial_positive_charge)
(create-sio-class "partial positive charge" "a partial negative charge is a negative charge where the value of the charge is negative.")
(add-disjoint partial_positive_charge partial_negative_charge)
(def create-sio-class (partial create-sio-class0 biological_sex))
(create-sio-class "female" "female is a biological sex of an individual with female sexual organs.")
(add-disjoint female hermaphrodite)
(add-disjoint female male)
(create-sio-class "hermaphrodite" "hermaphrodite is a biological sex of an individual with both male and female sexual organs.")
(add-annotation hermaphrodite [(annotation equivalentTo (literal "PATO:0001827" :type :RDF_PLAIN_LITERAL))])
(add-disjoint hermaphrodite female)
(add-disjoint hermaphrodite male)
(create-sio-class "male" "male is a biological sex of an individual with male sexual organs.")
(add-annotation male [(annotation equivalentTo (literal "PATO:0000384" :type :RDF_PLAIN_LITERAL))])
(add-disjoint male female)
(add-disjoint male hermaphrodite)
(create-sio-class0 ploidy "cellular quality" "cellular quality is the quality of a cell")
(def create-sio-class (partial create-sio-class0 life_status))
(create-sio-class "alive" "alive is the state of a biological organism that exhibits biological functions.")
(add-disjoint alive dead)
(create-sio-class "dead" "dead is the quality of an object in which there is a cessation of all biological functions.")
(add-disjoint dead alive)
(def create-sio-class (partial create-sio-class0 alive))
(create-sio-class "healthy" "healthy is an organismal state of complete physical, mental and social well-being.")
(create-sio-class "sick" "sick is the status of a living organism that is behaving at a sub-optimal level.")
(def create-sio-class (partial create-sio-class0 abnormal))
(create-sio-class "decreased" "A quality that has a value that is decreased compared to normal or average.")
(add-annotation decreased [(annotation equivalentTo (literal "PATO:0002301" :type :RDF_PLAIN_LITERAL))])
(add-disjoint decreased increased)
(create-sio-class "increased" "A quality that has a value that is increased compared to normal or average.")
(add-annotation increased [(annotation equivalentTo (literal "PATO:0002300" :type :RDF_PLAIN_LITERAL))])
(add-disjoint increased decreased)
(def create-sio-class (partial create-sio-class0 agreement_quality))
(create-sio-class "agreement" "agreement is the result of consensus decision making when members of the group agree.")
(add-disjoint agreement disagreement)
(create-sio-class "disagreement" "agreement is the result of consensus decision making when members of the group do not all agree.")
(add-disjoint disagreement agreement)
(def create-sio-class (partial create-sio-class0 truth_value))
(create-sio-class "_false" "false is a truth value in that indicates that it is not true.")
(add-subclass _false (hasvalue has_value (literal "false" :type :XSD_BOOLEAN)))
(add-disjoint _false _true)
(create-sio-class "_true" "true is a truth value that indicates that it holds under all possible worlds.")
(add-subclass _true (hasvalue has_value (literal "true" :type :XSD_BOOLEAN)))
(add-disjoint _true _false)
(def create-sio-class (partial create-sio-class0 agreement))
(create-sio-class "consensus" "consensus is an acceptable resolution, one that can be supported, even if not the preferred outcome for each individual.")
(create-sio-class "full agreement" "agreement is the result of consensus decision making when members of the group unanimously agree.")
(create-sio-class0 full_disagreement "disagreement" "agreement is the result of consensus decision making when members of the group do not all agree.")
(def create-sio-class (partial create-sio-class0 hypothetical))
(create-sio-class "fictional" "fictional is the quality of an entity that exists only in a creative work of fiction.")
(add-disjoint fictional real)
(create-sio-class "predicted" "predicted is the quality of an entity that is thought to exist, as evidenced by some rational procedure.")
